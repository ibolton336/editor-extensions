// import React, { FC } from "react";
// import {
//   Card,
//   CardBody,
//   Flex,
//   FlexItem,
//   Page,
//   PageSection,
//   PageSidebar,
//   PageSidebarBody,
//   Spinner,
//   Title,
// } from "@patternfly/react-core";
// import { Incident, LocalChange } from "@editor-extensions/shared";
// import { useExtensionState } from "../../hooks/useExtensionState";
// import { applyFile, discardFile, openFile, viewFix } from "../../hooks/actions";
// import "./chatPage.css";
// import { IncidentTableGroup } from "../IncidentTable/IncidentTableGroup";
// import { FileChanges } from "../FileChanges/FileChanges";
// import { ReceivedMessage } from "../ResolutionsPage/ReceivedMessage";
// import { SentMessage } from "../ResolutionsPage/SentMessage";

// const ChatPage: React.FC = () => {
//   const [state, dispatch] = useExtensionState();
//   const {
//     localChanges,
//     isFetchingSolution,
//     solutionData: resolution,
//     solutionScope,
//     solutionMessages,
//     solutionState,
//     workspaceRoot,
//   } = state;

//   const getRemainingFiles = () => {
//     if (!resolution) {
//       return [];
//     }
//     return localChanges.filter(({ state }) => state === "pending");
//   };
//   const isTriggeredByUser = !!solutionScope?.incidents?.length;
//   const isHistorySolution = !isTriggeredByUser && !!localChanges.length;

//   const isResolved =
//     solutionState === "received" && localChanges.length !== 0 && getRemainingFiles().length === 0;
//   const hasResponseWithErrors =
//     solutionState === "received" && !!resolution?.encountered_errors?.length;
//   const hasResponse =
//     (solutionState === "received" || isHistorySolution) && localChanges.length > 0;
//   const hasEmptyResponse = solutionState === "received" && localChanges.length === 0;
//   const hasNothingToView = solutionState === "none" && localChanges.length === 0;

//   const handleFileClick = (change: LocalChange) => dispatch(viewFix(change));
//   const handleAcceptClick = (change: LocalChange) => dispatch(applyFile(change));
//   const handleRejectClick = (change: LocalChange) => dispatch(discardFile(change));
//   const handleIncidentClick = (incident: Incident) => {
//     dispatch(openFile(incident.uri, incident.lineNumber ?? 0));
//   };

//   return (
//     <Page
//       sidebar={
//         <PageSidebar isSidebarOpen={false}>
//           <PageSidebarBody />
//         </PageSidebar>
//       }
//     >
//       <PageSection>
//         <Flex>
//           <FlexItem>
//             <Title headingLevel="h1" size="2xl">
//               Kai Results
//             </Title>
//           </FlexItem>
//         </Flex>
//       </PageSection>

//       <PageSection>
//         <Flex direction={{ default: "column" }} className="chat-container">
//           {isTriggeredByUser && (
//             <Flex
//               direction={{ default: "column" }}
//               grow={{ default: "grow" }}
//               alignItems={{ default: "alignItemsFlexEnd" }}
//             >
//               <SentMessage>Here is the scope of what I would like you to fix:</SentMessage>
//               <FlexItem className="chat-card-container">
//                 <ChatCard color="yellow">
//                   <IncidentTableGroup
//                     onIncidentSelect={handleIncidentClick}
//                     incidents={solutionScope.incidents}
//                     workspaceRoot={workspaceRoot}
//                   />
//                 </ChatCard>
//               </FlexItem>
//               <SentMessage>Please provide resolution for this issue.</SentMessage>
//             </Flex>
//           )}

//           <Flex
//             direction={{ default: "column" }}
//             grow={{ default: "grow" }}
//             alignItems={{ default: "alignItemsFlexStart" }}
//           >
//             {hasNothingToView && <ReceivedMessage>No resolutions available.</ReceivedMessage>}
//             {isHistorySolution && <ReceivedMessage>Loaded last known resolution.</ReceivedMessage>}
//             {solutionMessages.map((msg) => (
//               <ReceivedMessage key={msg}>{msg}</ReceivedMessage>
//             ))}
//             {isFetchingSolution && <Spinner />}

//             {hasResponse && (
//               <ReceivedMessage>
//                 <FileChanges
//                   changes={getRemainingFiles()}
//                   onFileClick={handleFileClick}
//                   onApplyFix={handleAcceptClick}
//                   onRejectChanges={handleRejectClick}
//                 />
//               </ReceivedMessage>
//             )}
//             {hasEmptyResponse && !hasResponseWithErrors && (
//               <ReceivedMessage>Received response contains no resolutions.</ReceivedMessage>
//             )}

//             {hasResponseWithErrors && (
//               <>
//                 <ReceivedMessage>Response contains errors:</ReceivedMessage>
//                 <ReceivedMessage>
//                   <ul>
//                     {resolution.encountered_errors.map((error, index) => (
//                       <li key={index}>{error}</li>
//                     ))}
//                   </ul>
//                 </ReceivedMessage>
//               </>
//             )}
//             {isResolved && !isFetchingSolution && (
//               <ReceivedMessage>All resolutions have been applied.</ReceivedMessage>
//             )}
//           </Flex>
//         </Flex>
//       </PageSection>
//     </Page>
//   );
// };

// const ChatCard: FC<{ color: "blue" | "yellow"; children: JSX.Element }> = ({ children, color }) => (
//   <Card className={`chat-bubble pf-m-${color}`}>
//     <CardBody>{children}</CardBody>
//   </Card>
// );

// export default ChatPage;

import React from "react";
import {
  Bullseye,
  DropdownGroup,
  DropdownItem,
  DropdownList,
  Page,
  PageSection,
  PageSidebar,
  PageSidebarBody,
  Spinner,
  Toolbar,
  ToolbarContent,
  ToolbarGroup,
  ToolbarItem,
} from "@patternfly/react-core";
import { useExtensionState } from "../../hooks/useExtensionState";
import {
  Chatbot,
  ChatbotContent,
  ChatbotDisplayMode,
  ChatbotHeader,
  ChatbotHeaderActions,
  ChatbotHeaderMain,
  ChatbotHeaderMenu,
  ChatbotHeaderOptionsDropdown,
  ChatbotHeaderSelectorDropdown,
  ChatbotHeaderTitle,
  ChatbotWelcomePrompt,
} from "@patternfly/chatbot";
import {
  OutlinedWindowRestoreIcon,
  OpenDrawerRightIcon,
  ExpandIcon,
} from "@patternfly/react-icons";
import { ServerStatusToggle } from "../ServerStatusToggle/ServerStatusToggle";
import { startServer, stopServer } from "../../hooks/actions";

const ChatPage: React.FC = () => {
  const [state, dispatch] = useExtensionState();
  const {
    isFetchingSolution,
    solutionScope,
    solutionMessages,
    solutionState,
    isStartingServer,
    isInitializingServer,
    serverState,
  } = state;

  const serverRunning = serverState === "running";
  const isTriggeredByUser = !!solutionScope?.incidents?.length;
  const [selectedModel, setSelectedModel] = React.useState("Granite Code 7B");
  const [showAll, setShowAll] = React.useState<boolean>(true);
  const [showMenu, setShowMenu] = React.useState<boolean>(true);
  const [showLogo, setShowLogo] = React.useState<boolean>(false);
  const [showCenteredLogo, setShowCenteredLogo] = React.useState<boolean>(true);
  const [showSelectorDropdown, setShowSelectorDropdown] = React.useState<boolean>(false);
  const [showOptionsDropdown, setShowOptionsDropdown] = React.useState<boolean>(false);
  const [showWelcomePrompts, setShowWelcomePrompts] = React.useState<boolean>(true);

  const handleServerToggle = () => {
    dispatch(serverRunning ? stopServer() : startServer());
  };

  const onSelectModel = (
    _event: React.MouseEvent<Element, MouseEvent> | undefined,
    value: string | number | undefined,
  ) => {
    setSelectedModel(value as string);
  };

  const welcomePrompts = [
    {
      title: "Start Server",
      message: "Would you like to start the server to begin our conversation?",
      onClick: () => {
        if (!serverRunning && !isStartingServer) {
          dispatch(startServer());
        }
      },
    },
  ];

  const title = "Kai Chat";
  return (
    <Page
      sidebar={
        <PageSidebar isSidebarOpen={false}>
          <PageSidebarBody />
        </PageSidebar>
      }
    >
      <PageSection>
        <Chatbot>
          <ChatbotHeader>
            {(showMenu || showLogo || showCenteredLogo) && (
              <ChatbotHeaderMain>
                {showMenu && (
                  <ChatbotHeaderMenu onMenuToggle={() => alert("Menu toggle clicked")} />
                )}
                {(showLogo || showCenteredLogo) && (
                  <ChatbotHeaderTitle>
                    {showCenteredLogo ? <Bullseye>{title}</Bullseye> : title}
                  </ChatbotHeaderTitle>
                )}
              </ChatbotHeaderMain>
            )}
            <ChatbotHeaderActions>
              <Toolbar>
                <ToolbarContent>
                  <ToolbarGroup variant="action-group-plain" align={{ default: "alignEnd" }}>
                    <ToolbarItem>
                      <ServerStatusToggle
                        isRunning={serverRunning}
                        isStarting={isStartingServer}
                        isInitializing={isInitializingServer}
                        onToggle={handleServerToggle}
                      />
                    </ToolbarItem>
                  </ToolbarGroup>
                </ToolbarContent>
              </Toolbar>
              {showSelectorDropdown && (
                <ChatbotHeaderSelectorDropdown value={selectedModel} onSelect={onSelectModel}>
                  <DropdownList>
                    <DropdownItem value="Granite Code 7B" key="granite">
                      Granite Code 7B
                    </DropdownItem>
                    <DropdownItem value="Llama 3.0" key="llama">
                      Llama 3.0
                    </DropdownItem>
                    <DropdownItem value="Mistral 3B" key="mistral">
                      Mistral 3B
                    </DropdownItem>
                  </DropdownList>
                </ChatbotHeaderSelectorDropdown>
              )}
              {showOptionsDropdown && (
                <ChatbotHeaderOptionsDropdown>
                  <DropdownGroup label="Display mode">
                    <DropdownList>
                      <DropdownItem
                        value={ChatbotDisplayMode.default}
                        key="switchDisplayOverlay"
                        icon={<OutlinedWindowRestoreIcon aria-hidden />}
                      >
                        <span>Overlay</span>
                      </DropdownItem>
                      <DropdownItem
                        value={ChatbotDisplayMode.docked}
                        key="switchDisplayDock"
                        icon={<OpenDrawerRightIcon aria-hidden />}
                      >
                        <span>Dock to window</span>
                      </DropdownItem>
                      <DropdownItem
                        value={ChatbotDisplayMode.fullscreen}
                        key="switchDisplayFullscreen"
                        icon={<ExpandIcon aria-hidden />}
                      >
                        <span>Fullscreen</span>
                      </DropdownItem>
                    </DropdownList>
                  </DropdownGroup>
                </ChatbotHeaderOptionsDropdown>
              )}
            </ChatbotHeaderActions>
          </ChatbotHeader>
          <ChatbotContent>
            {!serverRunning && !isStartingServer && (
              <ChatbotWelcomePrompt
                title="Welcome to Kai Chat"
                description="To get started, you'll need to initialize the server."
                prompts={welcomePrompts}
              />
            )}
          </ChatbotContent>
        </Chatbot>
      </PageSection>
    </Page>
  );
};

export default ChatPage;
